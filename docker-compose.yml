services:
  tailscale:
    image: tailscale/tailscale
    container_name: tailscale
    hostname: traefik
    networks: [ proxy ]
    restart: always
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
    volumes:
      - ./tailscale:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  traefik:
    image: traefik
    container_name: traefik
    network_mode: service:tailscale
    restart: always
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=${TZ}
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - LEGO_DISABLE_CNAME_SUPPORT=true
    depends_on:
      - tailscale
    volumes:
      - /var/run:/var/run:ro
      - ./traefik/certs:/certs
    entrypoint:
      - sh
      - -c
      - |
        echo "⏳ Waiting for Docker socket…"
        until [ -S /var/run/docker.sock ]; do
          sleep 1
        done
        echo "✅ Docker socket is up, starting Traefik"
        exec traefik \
          --providers.docker=true \
          --providers.docker.exposedByDefault=false \
          --providers.docker.endpoint=unix:///var/run/docker.sock \
          --providers.swarm=true \
          --providers.swarm.exposedByDefault=false \
          --providers.swarm.endpoint=unix:///var/run/docker-swarm.sock \
          --providers.swarm.network=proxy \
          --api.dashboard=true \
          --certificatesresolvers.letsencrypt.acme.dnschallenge=true \
          --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare \
          --certificatesresolvers.letsencrypt.acme.email=${LE_EMAIL} \
          --certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json \
          --entrypoints.web.address=:80 \
          --entrypoints.web.http.redirections.entrypoint.to=websecure \
          --entrypoints.web.http.redirections.entrypoint.scheme=https \
          --entrypoints.websecure.address=:443 \
          --entrypoints.websecure.http.tls=true \
          --entrypoints.websecure.http.tls.certResolver=letsencrypt \
          --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN} \
          --entrypoints.websecure.http.tls.domains[0].sans=${SANS_DOMAIN} \
          --log.level=DEBUG
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)'
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    networks: [ proxy ]
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/run/docker-swarm.sock:/var/run/docker-swarm.sock:ro
      - ./portainer:/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "com.centurylinklabs.watchtower.enable=true"

  postgres:
    image: postgres:16
    container_name: postgres
    networks: [ proxy ]
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./postgres:/var/lib/postgresql/data
    ports:
    - 5432:5432

  speedtest-tracker:
    image: lscr.io/linuxserver/speedtest-tracker:0.20.0
    container_name: speedtest-tracker
    networks: [ proxy ]
    depends_on: [ postgres ]
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      DISPLAY_TIMEZONE: ${TZ}
      APP_KEY: ${SPEEDTEST_APP_KEY}
      APP_DEBUG: true
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_DATABASE: ${SPEEDTEST_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      SPEEDTEST_SCHEDULE: ${SPEEDTEST_SCHEDULE}
    volumes:
      - ./speedtest-tracker:/config
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.speed.rule=Host(`speed.${DOMAIN}`)"
      - "traefik.http.routers.speed.entrypoints=websecure"
      - "traefik.http.routers.speed.tls.certresolver=letsencrypt"
      - "traefik.http.services.speed.loadbalancer.server.port=80"
      - "com.centurylinklabs.watchtower.enable=true"

  watchyourlan:
    image: aceberg/watchyourlan:latest
    container_name: watchyourlan
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    depends_on: [ postgres ]
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      IFACES: ${WYL_IFACES}
      LOGLEVEL: DEBUG
      THEME: vapor
      USE_DB: postgres
      PG_CONNECT: "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@127.0.0.1:5432/$WYL_DB?sslmode=disable"
    volumes:
      - ./watchyourlan:/data/WatchYourLAN
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  watchyourlan-proxy:
    image: alpine/socat:latest
    container_name: watchyourlan-proxy
    command:
      - TCP-LISTEN:8841,fork,reuseaddr
      - TCP:host-gateway:8840
    networks: [ proxy ]
    extra_hosts:
      - "host-gateway:host-gateway"
    depends_on: [ watchyourlan ]
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.watchyourlan.rule=Host(`lan.${DOMAIN}`)"
      - "traefik.http.routers.watchyourlan.entrypoints=websecure"
      - "traefik.http.routers.watchyourlan.tls.certresolver=letsencrypt"
      - "traefik.http.routers.watchyourlan.service=watchyourlan-proxy@docker"
      - "traefik.http.services.watchyourlan-proxy.loadbalancer.server.port=8841"

  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    networks: [ proxy ]
    depends_on: [ postgres ]
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      USER_UID: 1000
      USER_GID: 1000
      GITEA__database__DB_TYPE: postgres
      GITEA__database__HOST: postgres:5432
      GITEA__database__NAME: ${GITEA_DB}
      GITEA__database__USER: ${POSTGRES_USER}
      GITEA__database__PASSWD: ${POSTGRES_PASSWORD}
    volumes:
      - ./gitea:/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.git.rule=Host(`git.${DOMAIN}`)"
      - "traefik.http.routers.git.entrypoints=websecure"
      - "traefik.http.routers.git.tls.certresolver=letsencrypt"
      - "traefik.http.services.git.loadbalancer.server.port=3000"
      - "com.centurylinklabs.watchtower.enable=true"

  actual-budget:
    image: actualbudget/actual-server:latest
    container_name: actual
    networks: [ proxy ]
    restart: unless-stopped
    volumes:
      - ./actual:/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.actual.rule=Host(`actual.${DOMAIN}`)"
      - "traefik.http.routers.actual.entrypoints=websecure"
      - "traefik.http.routers.actual.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.actual-iso.headers.customResponseHeaders.Cross-Origin-Opener-Policy=same-origin"
      - "traefik.http.middlewares.actual-iso.headers.customResponseHeaders.Cross-Origin-Embedder-Policy=require-corp"
      - "traefik.http.routers.actual.middlewares=actual-iso@docker"
      - "traefik.http.services.actual.loadbalancer.server.port=5006"
      - "com.centurylinklabs.watchtower.enable=true"

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    networks: [ proxy ]
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_POLL_INTERVAL=86400
      - WATCHTOWER_ROLLING_RESTART=true

  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    networks: [ proxy ]
    restart: unless-stopped
    environment:
      PUID: 0
      PGID: 0
      TZ: ${TZ}
      SETTINGS_ENCRYPTION_KEY: ${DUPLICATI_ENCRYPTION_KEY}
      CLI_ARGS: ${DUPLICATI_CLI_ARGS}
      DUPLICATI__WEBSERVICE_PASSWORD: ${DUPLICATI_WEBSERVICE_PASSWORD}
      DOTNET_SYSTEM_IO_DISABLEFILELOCKING: true
    volumes:
      - ./duplicati/config:/config
      - ./duplicati/backups:/backups
      - ~/:/source
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.duplicati.rule=Host(`bkp.${DOMAIN}`)"
      - "traefik.http.routers.duplicati.entrypoints=websecure"
      - "traefik.http.routers.duplicati.tls.certresolver=letsencrypt"
      - "traefik.http.services.duplicati.loadbalancer.server.port=8200"
      - "com.centurylinklabs.watchtower.enable=true"

  unbound:
    image: mvance/unbound-rpi:latest
    container_name: unbound
    hostname: unbound
    ports:
      - "5335:53/tcp"
      - "5335:53/udp"
    volumes:
      - ./unbound/unbound.conf:/opt/unbound/etc/unbound/unbound.conf:ro
      - ./unbound/a-records.conf:/opt/unbound/etc/unbound/a-records.conf:ro
      - ./unbound/forward-records.conf:/opt/unbound/etc/unbound/forward-records.conf:ro
    networks: [ dns ]
    restart: unless-stopped

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    hostname: pihole
    depends_on:
      - unbound
    networks: [ dns, proxy ]
    ports:
      - "53:53/udp"
      - "53:53/tcp"
      - "80:80"
    environment:
      TZ: ${TZ}
      FTLCONF_dns_upstreams: "unbound#53"
      FTLCONF_dns_listeningMode: "all"
      WEBPASSWORD: "${PIHOLE_WEBPASSWORD}"
    volumes:
      - ./pihole/pihole:/etc/pihole
      - ./pihole/dnsmasq.d:/etc/dnsmasq.d
    restart: unless-stopped

  pihole-proxy:
    image: alpine/socat:latest
    container_name: pihole-proxy
    command:
      - TCP-LISTEN:8860,fork,reuseaddr
      - TCP:host-gateway:80
    networks: [ proxy ]
    extra_hosts:
      - "host-gateway:host-gateway"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.pihole.rule=Host(`pihole.${DOMAIN}`)"
      - "traefik.http.routers.pihole.entrypoints=websecure"
      - "traefik.http.routers.pihole.tls.certresolver=letsencrypt"
      - "traefik.http.services.pihole.loadbalancer.server.port=8860"

  glance:
    image: glanceapp/glance:latest
    container_name: glance
    networks: [ proxy ]
    restart: unless-stopped
    volumes:
      - ./glance/config:/app/config:ro
      - ./glance/assets:/app/assets
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.glance.rule=Host(`glance.${DOMAIN}`)"
      - "traefik.http.routers.glance.entrypoints=websecure"
      - "traefik.http.routers.glance.tls.certresolver=letsencrypt"
      - "traefik.http.services.glance.loadbalancer.server.port=8080"
      - "com.centurylinklabs.watchtower.enable=true"

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    network_mode: host
    restart: unless-stopped
    volumes:
      - ./uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  uptime-kuma-proxy:
    image: alpine/socat:latest
    container_name: uptime-kuma-proxy
    command:
      - TCP-LISTEN:8870,fork,reuseaddr
      - TCP:host-gateway:3001
    networks: [ proxy ]
    extra_hosts:
      - "host-gateway:host-gateway"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.uptime-kuma.rule=Host(`uptime.${DOMAIN}`)"
      - "traefik.http.routers.uptime-kuma.entrypoints=websecure"
      - "traefik.http.routers.uptime-kuma.tls.certresolver=letsencrypt"
      - "traefik.http.services.uptime-kuma.loadbalancer.server.port=8870"

  signal-cli-rest-api:
    container_name: signal-cli-rest-api
    image: bbernhard/signal-cli-rest-api:latest
    networks: [ proxy ]
    restart: always
    environment:
      MODE: normal
    ports:
      - "888:8080"
    volumes:
      - "./signal-cli-rest-api:/home/.local/share/signal-cli"

  thelounge:
    image: ghcr.io/thelounge/thelounge:latest
    container_name: thelounge
    networks: [ proxy ]
    restart: always
    volumes:
      - ./thelounge:/var/opt/thelounge
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.thelounge.rule=Host(`irc.${DOMAIN}`)"
      - "traefik.http.routers.thelounge.entrypoints=websecure"
      - "traefik.http.routers.thelounge.tls.certresolver=letsencrypt"
      - "traefik.http.services.thelounge.loadbalancer.server.port=9000"
      - "com.centurylinklabs.watchtower.enable=true"

  netdata:
    image: netdata/netdata
    container_name: netdata
    pid: host
    network_mode: host
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    volumes:
      - ./netdata/config:/etc/netdata
      - ./netdata/lib:/var/lib/netdata
      - ./netdata/cache:/var/cache/netdata
      - /:/host/root:ro,rslave
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/log:/host/var/log:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /run/dbus:/run/dbus:ro

  netdata-proxy:
    image: alpine/socat:latest
    container_name: netdata-proxy
    command:
      - TCP-LISTEN:8890,fork,reuseaddr
      - TCP:host-gateway:19999
    networks: [ proxy ]
    extra_hosts:
      - "host-gateway:host-gateway"
    restart: unless-stopped
    environment:
      NETDATA_DISABLE_CLOUD: 1
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.netdata.rule=Host(`netdata.${DOMAIN}`)"
      - "traefik.http.routers.netdata.entrypoints=websecure"
      - "traefik.http.routers.netdata.tls.certresolver=letsencrypt"
      - "traefik.http.routers.netdata-root.rule=Host(`netdata.${DOMAIN}`) && Path(`/`)"
      - "traefik.http.routers.netdata-root.entrypoints=websecure"
      - "traefik.http.routers.netdata-root.tls.certresolver=letsencrypt"
      - "traefik.http.routers.netdata-root.middlewares=netdata-redirect"
      - "traefik.http.routers.netdata-root.priority=100"
      - "traefik.http.routers.netdata-root.service=noop@internal"
      - "traefik.http.middlewares.netdata-redirect.redirectregex.regex=.*"
      - "traefik.http.middlewares.netdata-redirect.redirectregex.replacement=/v3"
      - "traefik.http.services.netdata.loadbalancer.server.port=8890"
      - "com.centurylinklabs.watchtower.enable=true"

  stuff-proxy:
    image: alpine/socat
    command:
      - TCP-LISTEN:777,fork,reuseaddr
      - TCP:host-gateway:777
    networks: [ proxy ]
    extra_hosts:
      - "host-gateway:host-gateway"
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy
      - traefik.http.routers.stuff.rule=Host(`stuff.${DOMAIN}`)
      - traefik.http.routers.stuff.entrypoints=websecure
      - traefik.http.routers.stuff.tls.certresolver=letsencrypt
      - traefik.http.services.stuff.loadbalancer.server.port=777

networks:
  proxy:
    driver: bridge
    external: true
  dns: