services:
  tailscale:
    image: tailscale/tailscale
    container_name: tailscale
    hostname: traefik
    networks: [ proxy ]
    restart: unless-stopped
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
    volumes:
      - ./tailscale:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  traefik:
    image: traefik
    container_name: traefik
    network_mode: service:tailscale
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=${TZ}
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}
      - LEGO_DISABLE_CNAME_SUPPORT=true
    depends_on:
      - tailscale
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/certs:/certs
    command:
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --api.dashboard=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email=${LE_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/certs/acme.json

      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.websecure.address=:443

      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=${SANS_DOMAIN}

      - --log.level=DEBUG
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)'
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    networks: [ proxy ]
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "com.centurylinklabs.watchtower.enable=true"

  postgres:
    image: postgres:16
    container_name: postgres
    networks: [ proxy ]
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./postgres:/var/lib/postgresql/data
    ports:
    - 5432:5432

  speedtest-tracker:
    image: lscr.io/linuxserver/speedtest-tracker:0.20.0
    container_name: speedtest-tracker
    networks: [ proxy ]
    depends_on: [ postgres ]
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      DISPLAY_TIMEZONE: ${TZ}
      APP_KEY: ${SPEEDTEST_APP_KEY}
      APP_DEBUG: true
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_DATABASE: ${SPEEDTEST_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      SPEEDTEST_SCHEDULE: ${SPEEDTEST_SCHEDULE}
    volumes:
      - ./speedtest-tracker:/config
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.speed.rule=Host(`speed.${DOMAIN}`)"
      - "traefik.http.routers.speed.entrypoints=websecure"
      - "traefik.http.routers.speed.tls.certresolver=letsencrypt"
      - "traefik.http.services.speed.loadbalancer.server.port=80"
      - "com.centurylinklabs.watchtower.enable=true"

  watchyourlan:
    image: aceberg/watchyourlan:latest
    container_name: watchyourlan
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    depends_on: [ postgres ]
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      IFACES: ${WYL_IFACES}
      LOGLEVEL: DEBUG
      THEME: vapor
      USE_DB: postgres
      PG_CONNECT: "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@127.0.0.1:5432/$WYL_DB?sslmode=disable"
    volumes:
      - ./watchyourlan:/data/WatchYourLAN
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  watchyourlan-proxy:
    image: alpine/socat:latest
    container_name: watchyourlan-proxy
    command:
      - TCP-LISTEN:8841,fork,reuseaddr
      - TCP:host-gateway:8840
    networks: [ proxy ]
    extra_hosts:
      - "host-gateway:host-gateway"
    restart: unless-stopped

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.watchyourlan.rule=Host(`lan.${DOMAIN}`)"
      - "traefik.http.routers.watchyourlan.entrypoints=websecure"
      - "traefik.http.routers.watchyourlan.tls.certresolver=letsencrypt"
      - "traefik.http.routers.watchyourlan.service=watchyourlan-proxy@docker"
      - "traefik.http.services.watchyourlan-proxy.loadbalancer.server.port=8841"
      - "com.centurylinklabs.watchtower.enable=true"

  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    networks: [ proxy ]
    depends_on: [ postgres ]
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      USER_UID: 1000
      USER_GID: 1000
      GITEA__database__DB_TYPE: postgres
      GITEA__database__HOST: postgres:5432
      GITEA__database__NAME: ${GITEA_DB}
      GITEA__database__USER: ${POSTGRES_USER}
      GITEA__database__PASSWD: ${POSTGRES_PASSWORD}
    volumes:
      - ./gitea:/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.git.rule=Host(`git.${DOMAIN}`)"
      - "traefik.http.routers.git.entrypoints=websecure"
      - "traefik.http.routers.git.tls.certresolver=letsencrypt"
      - "traefik.http.services.git.loadbalancer.server.port=3000"
      - "com.centurylinklabs.watchtower.enable=true"

  actual-budget:
    image: actualbudget/actual-server:latest
    container_name: actual
    networks: [ proxy ]
    restart: unless-stopped
    volumes:
      - ./actual:/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.actual.rule=Host(`actual.${DOMAIN}`)"
      - "traefik.http.routers.actual.entrypoints=websecure"
      - "traefik.http.routers.actual.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.actual-iso.headers.customResponseHeaders.Cross-Origin-Opener-Policy=same-origin"
      - "traefik.http.middlewares.actual-iso.headers.customResponseHeaders.Cross-Origin-Embedder-Policy=require-corp"
      - "traefik.http.routers.actual.middlewares=actual-iso@docker"
      - "traefik.http.services.actual.loadbalancer.server.port=5006"
      - "com.centurylinklabs.watchtower.enable=true"

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    networks: [ proxy ]
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_POLL_INTERVAL=86400
      - WATCHTOWER_ROLLING_RESTART=true

networks:
  proxy:
    driver: bridge
    external: true